# -*- coding: utf-8 -*-
"""Aprendizado_de_maq.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZZ78fyLsYhcs0fGPqEXGPKmtutwERTL7

- Trabalho para a disciplina de aprendizado de máquina: Criar um classificador para decidir se um cliente é prop
ício para receber crédito ou não.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, precision_score, recall_score, f1_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.tree import export_graphviz
import graphviz
import numpy as np
import matplotlib.pyplot as plt
from sklearn.tree import plot_tree

data_treino = pd.read_csv("/content/conjunto_de_treinamento.csv")
data_teste = pd.read_csv("/content/conjunto_de_teste.csv")

data_treino

#logo são cerca de 42 colunas, contando com a coluna alvo
len(data_treino.columns)

# Aqui, conseguimos ver que existem diversas colunas com dados de tipo texto (" string "), logo vamos transformar para dados
#numéricos
data_treino.iloc[1,:]

# podemos ver que existem, muitas linhas com valores Nan, logo vamos retira-los
data_treino = data_treino.dropna(axis=1)
data_teste = data_teste.dropna(axis=1)

labelencoder = LabelEncoder()
data_treino["forma_envio_solicitacao"]= labelencoder.fit_transform(data_treino["forma_envio_solicitacao"])
data_treino["sexo"]= labelencoder.fit_transform(data_treino["sexo"])
data_treino["estado_onde_nasceu"]= labelencoder.fit_transform(data_treino["estado_onde_nasceu"])
data_treino["estado_onde_reside"]= labelencoder.fit_transform(data_treino["estado_onde_reside"])
data_treino["possui_telefone_residencial"]= labelencoder.fit_transform(data_treino["possui_telefone_residencial"])
data_treino["possui_telefone_celular"]= labelencoder.fit_transform(data_treino["possui_telefone_celular"])
data_treino["vinculo_formal_com_empresa"]= labelencoder.fit_transform(data_treino["vinculo_formal_com_empresa"])
data_treino["possui_telefone_trabalho"]= labelencoder.fit_transform(data_treino["possui_telefone_trabalho"])
data_treino["estado_onde_trabalha"]= labelencoder.fit_transform(data_treino["estado_onde_trabalha"])

data_treino["codigo_area_telefone_trabalho"] = data_treino["codigo_area_telefone_trabalho"].dropna()

#Organizando o index
data_treino.reset_index(drop=True , inplace=True)
data_treino

data_treino = data_treino.drop("codigo_area_telefone_trabalho", axis=1)
data_teste = data_teste.drop("codigo_area_telefone_trabalho", axis=1)

data_treino = data_treino.drop("codigo_area_telefone_residencial", axis=1)
data_teste = data_teste.drop("codigo_area_telefone_residencial", axis=1)

data_teste.info()

data_treino.info()

y= data_treino.loc[:,"inadimplente"]
X=data_treino.loc[:, [col for col in data_treino.columns if col != "inadimplente"]]

# X_treino, X_teste, y_treino, y_teste = train_test_split(X, y, test_size=0.2, random_state=42)

modelo = RandomForestClassifier(random_state=1,n_estimators=300, max_depth=12  , max_leaf_nodes=12, criterion="gini")

# Aqui, eu treino o modelo de RandomForest, com apenas dados de treino
modelo.fit(X,y)

# imprimindo a árvore

tree_index = 35  # Número da árvore que você quer visualizar
tree_to_visualize = modelo.estimators_[tree_index]  # Acesso à árvore específica

# Visualizando a árvore
plt.figure(figsize=(20, 10))
plot_tree(tree_to_visualize,
          filled=True,
          feature_names=data_treino.columns[:-1],  # Nomes das features
          class_names=True,  # Classes
          rounded=True)
plt.title(f"Árvore de Decisão {tree_index} da Random Forest")
plt.show()

"""- Agora, vamos começar a trabalhar nossos dados de teste"""

data_teste.reset_index(drop=True, inplace=True)
data_teste

labelencoder = LabelEncoder()
data_teste["forma_envio_solicitacao"]= labelencoder.fit_transform(data_teste["forma_envio_solicitacao"])
data_teste["sexo"]= labelencoder.fit_transform(data_teste["sexo"])
data_teste["estado_onde_nasceu"]= labelencoder.fit_transform(data_teste["estado_onde_nasceu"])
data_teste["estado_onde_reside"]= labelencoder.fit_transform(data_teste["estado_onde_reside"])
data_teste["possui_telefone_residencial"]= labelencoder.fit_transform(data_teste["possui_telefone_residencial"])
data_teste["possui_telefone_celular"]= labelencoder.fit_transform(data_teste["possui_telefone_celular"])
data_teste["vinculo_formal_com_empresa"]= labelencoder.fit_transform(data_teste["vinculo_formal_com_empresa"])
data_teste["possui_telefone_trabalho"]= labelencoder.fit_transform(data_teste["possui_telefone_trabalho"])
data_teste["estado_onde_trabalha"]= labelencoder.fit_transform(data_teste["estado_onde_trabalha"])

# previsao = modelo.predict(X_teste)
previsao= modelo.predict(data_teste)

# Para problemas de classificação
# accuracy = accuracy_score(y_teste, previsao)
# precision = precision_score(y_teste, previsao, average='weighted')
# recall= recall_score(y_teste, previsao, average='weighted')
# f1= f1_score(y_teste,previsao, average='weighted')

# print(f'precisão:{precision}, acurácia:{accuracy}, recall:{recall}, f1:{f1}')

len(previsao)

dict_previsao={"inadimplente":previsao, "id_solicitante":data_teste["id_solicitante"]}
df_previsao= pd.DataFrame(dict_previsao)
df_previsao

df_previsao.to_csv("previsao2.csv",index=False)

df_previsao2=pd.read_csv("/content/previsao2.csv")
df_previsao2